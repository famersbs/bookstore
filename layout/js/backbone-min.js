

<!DOCTYPE html>
<html>
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# githubog: http://ogp.me/ns/fb/githubog#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>backbone/backbone-min.js at master · documentcloud/backbone · GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png" />
    <link rel="logo" type="image/svg" href="https://github-media-downloads.s3.amazonaws.com/github-logo.svg" />
    <meta property="og:image" content="https://a248.e.akamai.net/assets.github.com/images/modules/logos_page/Octocat.png">
    <link rel="assets" href="https://a248.e.akamai.net/assets.github.com/">
    <link rel="xhr-socket" href="/_sockets" />
    
    


    <meta name="msapplication-TileImage" content="/windows-tile.png" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="selected-link" value="repo_source" data-pjax-transient />
    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="github" name="octolytics-app-id" />

    
    
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <meta content="authenticity_token" name="csrf-param" />
<meta content="wxEw1QMsTviY1CZ59AtJqhkg8i81OvHwAKLBNpNLnEs=" name="csrf-token" />

    <link href="https://a248.e.akamai.net/assets.github.com/assets/github-be6069435cb0250bd316958375c0de713801bdf5.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://a248.e.akamai.net/assets.github.com/assets/github2-91a602bfb8b2a53f90aa7aea127a69e4f9ef1f11.css" media="all" rel="stylesheet" type="text/css" />
    


      <script src="https://a248.e.akamai.net/assets.github.com/assets/frameworks-1f72571b966545f4e27481a3b0ebbeeed4f2f139.js" type="text/javascript"></script>
      <script src="https://a248.e.akamai.net/assets.github.com/assets/github-3b51dd74a94c713c22309e373955e5fa02a3bb65.js" type="text/javascript"></script>
      
      <meta http-equiv="x-pjax-version" content="f5ee7511175547406ed413cec6ae4c9b">

        <link data-pjax-transient rel='permalink' href='/documentcloud/backbone/blob/cbdcbfa5f96bcc135687f6d49059e313c8d8ab7b/backbone-min.js'>

  <meta property="og:title" content="backbone"/>
  <meta property="og:type" content="githubog:gitrepository"/>
  <meta property="og:url" content="https://github.com/documentcloud/backbone"/>
  <meta property="og:image" content="https://a248.e.akamai.net/assets.github.com/images/gravatars/gravatar-user-420.png"/>
  <meta property="og:site_name" content="GitHub"/>
  <meta property="og:description" content="backbone - Give your JS App some Backbone with Models, Views, Collections, and Events"/>

  <meta name="description" content="backbone - Give your JS App some Backbone with Models, Views, Collections, and Events" />

  <meta content="93383" name="octolytics-dimension-user_id" /><meta content="documentcloud" name="octolytics-dimension-user_login" /><meta content="952189" name="octolytics-dimension-repository_id" /><meta content="documentcloud/backbone" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="952189" name="octolytics-dimension-repository_network_root_id" /><meta content="documentcloud/backbone" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/documentcloud/backbone/commits/master.atom" rel="alternate" title="Recent Commits to backbone:master" type="application/atom+xml" />

  </head>


  <body class="logged_out page-blob  vis-public env-production  kill-the-chrome">

    <div class="wrapper">
      
      
      

      
      <div class="header header-logged-out">
  <div class="container clearfix">

    <a class="header-logo-wordmark" href="https://github.com/">
      <span class="mega-octicon octicon-logo-github"></span>
    </a>

    <div class="header-actions">
      <a class="button primary" href="/signup">Sign up</a>
      <a class="button" href="/login?return_to=%2Fdocumentcloud%2Fbackbone%2Fblob%2Fmaster%2Fbackbone-min.js">Sign in</a>
    </div>

    <div class="command-bar js-command-bar  in-repository">


      <ul class="top-nav">
          <li class="explore"><a href="/explore">Explore</a></li>
        <li class="features"><a href="/features">Features</a></li>
          <li class="enterprise"><a href="https://enterprise.github.com/">Enterprise</a></li>
          <li class="blog"><a href="/blog">Blog</a></li>
      </ul>
        <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">

<input type="text" data-hotkey="/ s" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" autocapitalize="off"
    
    
      data-repo="documentcloud/backbone"
      data-branch="master"
      data-sha="2678b2c58e4626105c2221615e646ef07c36c547"
  >

    <input type="hidden" name="nwo" value="documentcloud/backbone" />

    <div class="select-menu js-menu-container js-select-menu search-context-select-menu">
      <span class="minibutton select-menu-button js-menu-target">
        <span class="js-select-button">This repository</span>
      </span>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container">
        <div class="select-menu-modal">

          <div class="select-menu-item js-navigation-item selected">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" class="js-search-this-repository" name="search_target" value="repository" checked="checked" />
            <div class="select-menu-item-text js-select-button-text">This repository</div>
          </div> <!-- /.select-menu-item -->

          <div class="select-menu-item js-navigation-item">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" name="search_target" value="global" />
            <div class="select-menu-item-text js-select-button-text">All repositories</div>
          </div> <!-- /.select-menu-item -->

        </div>
      </div>
    </div>

  <span class="octicon help tooltipped downwards" title="Show command bar help">
    <span class="octicon octicon-question"></span>
  </span>


  <input type="hidden" name="ref" value="cmdform">

</form>
    </div>

  </div>
</div>


      


          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        

<ul class="pagehead-actions">



    <li>
      <a href="/login?return_to=%2Fdocumentcloud%2Fbackbone"
        class="minibutton with-count js-toggler-target star-button entice tooltipped upwards"
        title="You must be signed in to use this feature" rel="nofollow">
        <span class="octicon octicon-star"></span>Star
      </a>
      <a class="social-count js-social-count" href="/documentcloud/backbone/stargazers">
        14,721
      </a>
    </li>
    <li>
      <a href="/login?return_to=%2Fdocumentcloud%2Fbackbone"
        class="minibutton with-count js-toggler-target fork-button entice tooltipped upwards"
        title="You must be signed in to fork a repository" rel="nofollow">
        <span class="octicon octicon-git-branch"></span>Fork
      </a>
      <a href="/documentcloud/backbone/network" class="social-count">
        2,892
      </a>
    </li>
</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="repo-label"><span>public</span></span>
          <span class="mega-octicon octicon-repo"></span>
          <span class="author">
            <a href="/documentcloud" class="url fn" itemprop="url" rel="author"><span itemprop="title">documentcloud</span></a></span
          ><span class="repohead-name-divider">/</span><strong
          ><a href="/documentcloud/backbone" class="js-current-repository js-repo-home-link">backbone</a></strong>

          <span class="page-context-loader">
            <img alt="Octocat-spinner-32" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">

      <div class="repository-with-sidebar repo-container
            ">

          <div class="repository-sidebar">

              

<div class="repo-nav repo-nav-full js-repository-container-pjax js-octicon-loaders">
  <div class="repo-nav-contents">
    <ul class="repo-menu">
      <li class="tooltipped leftwards" title="Code">
        <a href="/documentcloud/backbone" class="js-selected-navigation-item selected" data-gotokey="c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_tags repo_branches /documentcloud/backbone">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped leftwards" title="Issues">
          <a href="/documentcloud/backbone/issues" class="js-selected-navigation-item js-disable-pjax" data-gotokey="i" data-selected-links="repo_issues /documentcloud/backbone/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class='counter'>31</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped leftwards" title="Pull Requests"><a href="/documentcloud/backbone/pulls" class="js-selected-navigation-item js-disable-pjax" data-gotokey="p" data-selected-links="repo_pulls /documentcloud/backbone/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class='counter'>8</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


        <li class="tooltipped leftwards" title="Wiki">
          <a href="/documentcloud/backbone/wiki" class="js-selected-navigation-item " data-pjax="true" data-selected-links="repo_wiki /documentcloud/backbone/wiki">
            <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>


    </ul>
    <div class="repo-menu-separator"></div>
    <ul class="repo-menu">

      <li class="tooltipped leftwards" title="Pulse">
        <a href="/documentcloud/backbone/pulse" class="js-selected-navigation-item " data-pjax="true" data-selected-links="pulse /documentcloud/backbone/pulse">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped leftwards" title="Graphs">
        <a href="/documentcloud/backbone/graphs" class="js-selected-navigation-item " data-pjax="true" data-selected-links="repo_graphs repo_contributors /documentcloud/backbone/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped leftwards" title="Network">
        <a href="/documentcloud/backbone/network" class="js-selected-navigation-item js-disable-pjax" data-selected-links="repo_network /documentcloud/backbone/network">
          <span class="octicon octicon-git-branch"></span> <span class="full-word">Network</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

    </ul>

  </div>
</div>


              <div class="only-with-full-nav">

                

  

<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><strong>HTTPS</strong> clone URL</h3>

  <input type="text" class="clone js-url-field"
         value="https://github.com/documentcloud/backbone.git" readonly="readonly">

  <span class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="https://github.com/documentcloud/backbone.git" data-copied-hint="copied!" title="copy to clipboard"><span class="octicon octicon-clippy"></span></span>
</div>

  

<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><strong>Subversion</strong> checkout URL</h3>

  <input type="text" class="clone js-url-field"
         value="https://github.com/documentcloud/backbone" readonly="readonly">

  <span class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="https://github.com/documentcloud/backbone" data-copied-hint="copied!" title="copy to clipboard"><span class="octicon octicon-clippy"></span></span>
</div>



<p class="clone-options">You can clone with
    <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>,
    <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>,
  and <a href="https://help.github.com/articles/which-remote-url-should-i-use">other methods.</a>
</p>




                  <a href="/documentcloud/backbone/archive/master.zip"
                     class="minibutton sidebar-button"
                     title="Download this repository as a zip file"
                     rel="nofollow">
                    <span class="octicon octicon-cloud-download"></span>
                    Download ZIP
                  </a>

              </div>
          </div>

          <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
            


<!-- blob contrib key: blob_contributors:v21:c1616aafed2fa3a269252011c92c579f -->
<!-- blob contrib frag key: views10/v8/blob_contributors:v21:c1616aafed2fa3a269252011c92c579f -->


      <p title="This is a placeholder element" class="js-history-link-replace hidden"></p>

        <a href="/documentcloud/backbone/find/master" data-pjax data-hotkey="t" style="display:none">Show File Finder</a>

        <div class="file-navigation">
          


<div class="select-menu js-menu-container js-select-menu" >
  <span class="minibutton select-menu-button js-menu-target" data-hotkey="w"
    data-master-branch="master"
    data-ref="master">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax>

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-remove-close js-menu-close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/gh-pages/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="gh-pages" rel="nofollow" title="gh-pages">gh-pages</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/master/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="master" rel="nofollow" title="master">master</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/1.0.0/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="1.0.0" rel="nofollow" title="1.0.0">1.0.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.9.10/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.9.10" rel="nofollow" title="0.9.10">0.9.10</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.9.9/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.9.9" rel="nofollow" title="0.9.9">0.9.9</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.9.2/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.9.2" rel="nofollow" title="0.9.2">0.9.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.9.1/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.9.1" rel="nofollow" title="0.9.1">0.9.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.9.0/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.9.0" rel="nofollow" title="0.9.0">0.9.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.5.3/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.5.3" rel="nofollow" title="0.5.3">0.5.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.5.2/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.5.2" rel="nofollow" title="0.5.2">0.5.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.5.1/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.5.1" rel="nofollow" title="0.5.1">0.5.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.5.0/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.5.0" rel="nofollow" title="0.5.0">0.5.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.3.3/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.3.3" rel="nofollow" title="0.3.3">0.3.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.3.2/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.3.2" rel="nofollow" title="0.3.2">0.3.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.3.1/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.3.1" rel="nofollow" title="0.3.1">0.3.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.3.0/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.3.0" rel="nofollow" title="0.3.0">0.3.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.2.0/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.2.0" rel="nofollow" title="0.2.0">0.2.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.1.2/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.1.2" rel="nofollow" title="0.1.2">0.1.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.1.1/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.1.1" rel="nofollow" title="0.1.1">0.1.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/documentcloud/backbone/blob/0.1.0/backbone-min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="0.1.0" rel="nofollow" title="0.1.0">0.1.0</a>
            </div> <!-- /.select-menu-item -->
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

          <div class="breadcrumb">
            <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/documentcloud/backbone" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">backbone</span></a></span></span><span class="separator"> / </span><strong class="final-path">backbone-min.js</strong> <span class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="backbone-min.js" data-copied-hint="copied!" title="copy to clipboard"><span class="octicon octicon-clippy"></span></span>
          </div>
        </div>


        
  <div class="commit file-history-tease">
    <img class="main-avatar" height="24" src="https://secure.gravatar.com/avatar/32652ed5b8fbd2ecdb1c78e9ac567b4b?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="24" />
    <span class="author"><a href="/jashkenas" rel="author">jashkenas</a></span>
    <time class="js-relative-date" datetime="2013-03-20T05:22:04-07:00" title="2013-03-20 05:22:04">March 20, 2013</time>
    <div class="commit-title">
        <a href="/documentcloud/backbone/commit/a50000dc1ac61ad426feae9d2be2ba905896236f" class="message">Rebuilding minified release with --mangle</a>
    </div>

    <div class="participation">
      <p class="quickstat"><a href="#blob_contributors_box" rel="facebox"><strong>5</strong> contributors</a></p>
          <a class="avatar tooltipped downwards" title="jashkenas" href="/documentcloud/backbone/commits/master/backbone-min.js?author=jashkenas"><img height="20" src="https://secure.gravatar.com/avatar/32652ed5b8fbd2ecdb1c78e9ac567b4b?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="20" /></a>
    <a class="avatar tooltipped downwards" title="iros" href="/documentcloud/backbone/commits/master/backbone-min.js?author=iros"><img height="20" src="https://secure.gravatar.com/avatar/f99c66cc9f64454df105006286d47521?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="20" /></a>
    <a class="avatar tooltipped downwards" title="tgriesser" href="/documentcloud/backbone/commits/master/backbone-min.js?author=tgriesser"><img height="20" src="https://secure.gravatar.com/avatar/fb5d018725ccbe7c4359e29edddb201d?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="20" /></a>
    <a class="avatar tooltipped downwards" title="mostly-magic" href="/documentcloud/backbone/commits/master/backbone-min.js?author=mostly-magic"><img height="20" src="https://secure.gravatar.com/avatar/38af59b019b2b6f445a6039be4d5de61?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="20" /></a>
    <a class="avatar tooltipped downwards" title="diegotres" href="/documentcloud/backbone/commits/master/backbone-min.js?author=diegotres"><img height="20" src="https://secure.gravatar.com/avatar/c44801862bd8629a74eb6b642cc4c23f?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="20" /></a>


    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list">
        <li class="facebox-user-list-item">
          <img height="24" src="https://secure.gravatar.com/avatar/32652ed5b8fbd2ecdb1c78e9ac567b4b?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="24" />
          <a href="/jashkenas">jashkenas</a>
        </li>
        <li class="facebox-user-list-item">
          <img height="24" src="https://secure.gravatar.com/avatar/f99c66cc9f64454df105006286d47521?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="24" />
          <a href="/iros">iros</a>
        </li>
        <li class="facebox-user-list-item">
          <img height="24" src="https://secure.gravatar.com/avatar/fb5d018725ccbe7c4359e29edddb201d?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="24" />
          <a href="/tgriesser">tgriesser</a>
        </li>
        <li class="facebox-user-list-item">
          <img height="24" src="https://secure.gravatar.com/avatar/38af59b019b2b6f445a6039be4d5de61?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="24" />
          <a href="/mostly-magic">mostly-magic</a>
        </li>
        <li class="facebox-user-list-item">
          <img height="24" src="https://secure.gravatar.com/avatar/c44801862bd8629a74eb6b642cc4c23f?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="24" />
          <a href="/diegotres">diegotres</a>
        </li>
      </ul>
    </div>
  </div>



        <div id="files" class="bubble">
          <div class="file">
            <div class="meta">
              <div class="info">
                <span class="icon"><b class="octicon octicon-file-text"></b></span>
                <span class="mode" title="File Mode">file</span>
                  <span>4 lines (4 sloc)</span>
                <span>19.457 kb</span>
              </div>
              <div class="actions">
                <div class="button-group">
                      <a class="minibutton js-entice" href=""
                         data-entice="You must be signed in and on a branch to make or propose changes">Edit</a>
                  <a href="/documentcloud/backbone/raw/master/backbone-min.js" class="button minibutton " id="raw-url">Raw</a>
                    <a href="/documentcloud/backbone/blame/master/backbone-min.js" class="button minibutton ">Blame</a>
                  <a href="/documentcloud/backbone/commits/master/backbone-min.js" class="button minibutton " rel="nofollow">History</a>
                </div><!-- /.button-group -->
              </div><!-- /.actions -->

            </div>
                <div class="blob-wrapper data type-javascript js-blob-data">
      <table class="file-code file-diff">
        <tr class="file-code-line">
          <td class="blob-line-nums">
            <span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>

          </td>
          <td class="blob-line-code">
                  <div class="highlight"><pre><div class='line' id='LC1'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">Backbone</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">slice</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">splice</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">exports</span><span class="o">!==</span><span class="s2">&quot;undefined&quot;</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">exports</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">Backbone</span><span class="o">=</span><span class="p">{}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">VERSION</span><span class="o">=</span><span class="s2">&quot;1.0.0&quot;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">_</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">require</span><span class="o">!==</span><span class="s2">&quot;undefined&quot;</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;underscore&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">jQuery</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">Zepto</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">ender</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">$</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">noConflict</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">t</span><span class="p">.</span><span class="nx">Backbone</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span><span class="nx">a</span><span class="p">.</span><span class="nx">emulateHTTP</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">emulateJSON</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">Events</span><span class="o">=</span><span class="p">{</span><span class="nx">on</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;on&quot;</span><span class="p">,</span><span class="nx">t</span><span class="p">,[</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">])</span><span class="o">||!</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="p">{});</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">callback</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">context</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">ctx</span><span class="o">:</span><span class="nx">i</span><span class="o">||</span><span class="k">this</span><span class="p">});</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">once</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;once&quot;</span><span class="p">,</span><span class="nx">t</span><span class="p">,[</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">])</span><span class="o">||!</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">r</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)});</span><span class="nx">s</span><span class="p">.</span><span class="nx">_callback</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">)},</span><span class="nx">off</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">||!</span><span class="nx">l</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;off&quot;</span><span class="p">,</span><span class="nx">t</span><span class="p">,[</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">]))</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="o">&amp;&amp;!</span><span class="nx">e</span><span class="o">&amp;&amp;!</span><span class="nx">i</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="p">{};</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="nx">a</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">u</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">o</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">t</span><span class="p">]){</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="nx">i</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">callback</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">_callback</span><span class="o">||</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">context</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)}}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">t</span><span class="p">]}}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">trigger</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;trigger&quot;</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">))</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">t</span><span class="p">];</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">all</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="nx">c</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="nx">c</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">stopListening</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=!</span><span class="nx">e</span><span class="o">&amp;&amp;!</span><span class="nx">i</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">===</span><span class="s2">&quot;object&quot;</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)(</span><span class="nx">r</span><span class="o">=</span><span class="p">{})[</span><span class="nx">t</span><span class="p">.</span><span class="nx">_listenerId</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="k">in</span> <span class="nx">r</span><span class="p">){</span><span class="nx">r</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">off</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">[</span><span class="nx">n</span><span class="p">]}</span><span class="k">return</span> <span class="k">this</span><span class="p">}};</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="sr">/\s+/</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">)</span><span class="k">return</span> <span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">i</span><span class="o">===</span><span class="s2">&quot;object&quot;</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span> <span class="k">in</span> <span class="nx">i</span><span class="p">){</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">t</span><span class="p">,[</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">[</span><span class="nx">s</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">r</span><span class="p">))}</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">i</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">u</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">t</span><span class="p">,[</span><span class="nx">n</span><span class="p">[</span><span class="nx">a</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">r</span><span class="p">))}</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span><span class="k">return</span> <span class="kc">true</span><span class="p">};</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">while</span><span class="p">(</span><span class="o">++</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">)(</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ctx</span><span class="p">);</span><span class="k">return</span><span class="p">;</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="k">while</span><span class="p">(</span><span class="o">++</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">)(</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="k">return</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">while</span><span class="p">(</span><span class="o">++</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">)(</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="k">while</span><span class="p">(</span><span class="o">++</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">)(</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">while</span><span class="p">(</span><span class="o">++</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">)(</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span><span class="nx">e</span><span class="p">)}};</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">{</span><span class="nx">listenTo</span><span class="o">:</span><span class="s2">&quot;on&quot;</span><span class="p">,</span><span class="nx">listenToOnce</span><span class="o">:</span><span class="s2">&quot;once&quot;</span><span class="p">};</span><span class="nx">h</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">o</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">){</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="o">=</span><span class="p">{});</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">_listenerId</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_listenerId</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">));</span><span class="nx">s</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">i</span><span class="o">===</span><span class="s2">&quot;object&quot;</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">](</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}});</span><span class="nx">o</span><span class="p">.</span><span class="nx">bind</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">on</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">unbind</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">off</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">Model</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="p">{};</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">{});</span><span class="k">this</span><span class="p">.</span><span class="nx">cid</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="p">{};</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">pick</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">p</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parse</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;defaults&quot;</span><span class="p">)){</span><span class="nx">r</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({},</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;url&quot;</span><span class="p">,</span><span class="s2">&quot;urlRoot&quot;</span><span class="p">,</span><span class="s2">&quot;collection&quot;</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">o</span><span class="p">,{</span><span class="nx">changed</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">validationError</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">idAttribute</span><span class="o">:</span><span class="s2">&quot;id&quot;</span><span class="p">,</span><span class="nx">initialize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">toJSON</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)},</span><span class="nx">sync</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">sync</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)},</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">t</span><span class="p">]},</span><span class="nx">escape</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">escape</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">t</span><span class="p">))},</span><span class="nx">has</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">!=</span><span class="kc">null</span><span class="p">},</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">==</span><span class="kc">null</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">===</span><span class="s2">&quot;object&quot;</span><span class="p">){</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">else</span><span class="p">{(</span><span class="nx">s</span><span class="o">=</span><span class="p">{})[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">i</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">{});</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_validate</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">unset</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">silent</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="p">[];</span><span class="nx">u</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_changing</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_changing</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">u</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_previousAttributes</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="o">=</span><span class="p">{}}</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_previousAttributes</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">idAttribute</span> <span class="k">in</span> <span class="nx">s</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">idAttribute</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span> <span class="k">in</span> <span class="nx">s</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">isEqual</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span><span class="nx">e</span><span class="p">))</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">isEqual</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span><span class="nx">e</span><span class="p">)){</span><span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="p">[</span><span class="nx">r</span><span class="p">]}</span><span class="nx">n</span><span class="o">?</span><span class="k">delete</span> <span class="nx">c</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">:</span><span class="nx">c</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">o</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_pending</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;change:&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]],</span><span class="nx">i</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">o</span><span class="p">){</span><span class="k">while</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_pending</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_pending</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="p">)}}</span><span class="k">this</span><span class="p">.</span><span class="nx">_pending</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_changing</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">unset</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="nx">e</span><span class="p">,{</span><span class="nx">unset</span><span class="o">:</span><span class="kc">true</span><span class="p">}))},</span><span class="nx">clear</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="nx">t</span><span class="p">,{</span><span class="nx">unset</span><span class="o">:</span><span class="kc">true</span><span class="p">}))},</span><span class="nx">hasChanged</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">==</span><span class="kc">null</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="p">);</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="p">,</span><span class="nx">t</span><span class="p">)},</span><span class="nx">changedAttributes</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">hasChanged</span><span class="p">()</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="p">)</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_changing</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_previousAttributes</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span> <span class="k">in</span> <span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isEqual</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">s</span><span class="p">]))</span><span class="k">continue</span><span class="p">;(</span><span class="nx">i</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">{}))[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">},</span><span class="nx">previous</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">==</span><span class="kc">null</span><span class="o">||!</span><span class="k">this</span><span class="p">.</span><span class="nx">_previousAttributes</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_previousAttributes</span><span class="p">[</span><span class="nx">t</span><span class="p">]},</span><span class="nx">previousAttributes</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_previousAttributes</span><span class="p">)},</span><span class="nx">fetch</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parse</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">success</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">success</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">),</span><span class="nx">t</span><span class="p">))</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;sync&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)};</span><span class="nx">R</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sync</span><span class="p">(</span><span class="s2">&quot;read&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">)},</span><span class="nx">save</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">==</span><span class="kc">null</span><span class="o">||</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">===</span><span class="s2">&quot;object&quot;</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">else</span><span class="p">{(</span><span class="nx">r</span><span class="o">=</span><span class="p">{})[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="o">||!</span><span class="nx">i</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="nx">validate</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span><span class="nx">i</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_validate</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">wait</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="nx">a</span><span class="p">,</span><span class="nx">r</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">parse</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">success</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">success</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">o</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">r</span><span class="o">||</span><span class="p">{},</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nx">o</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)){</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span><span class="nx">u</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">o</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;sync&quot;</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)};</span><span class="nx">R</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isNew</span><span class="p">()</span><span class="o">?</span><span class="s2">&quot;create&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">patch</span><span class="o">?</span><span class="s2">&quot;patch&quot;</span><span class="o">:</span><span class="s2">&quot;update&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">===</span><span class="s2">&quot;patch&quot;</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">attrs</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sync</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">},</span><span class="nx">destroy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="p">{};</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">success</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;destroy&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">collection</span><span class="p">,</span><span class="nx">t</span><span class="p">)};</span><span class="nx">t</span><span class="p">.</span><span class="nx">success</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">wait</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">isNew</span><span class="p">())</span><span class="nx">r</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">isNew</span><span class="p">())</span><span class="nx">e</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;sync&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">)};</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isNew</span><span class="p">()){</span><span class="nx">t</span><span class="p">.</span><span class="nx">success</span><span class="p">();</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span><span class="nx">R</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sync</span><span class="p">(</span><span class="s2">&quot;delete&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span><span class="nx">r</span><span class="p">();</span><span class="k">return</span> <span class="nx">s</span><span class="p">},</span><span class="nx">url</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;urlRoot&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">,</span><span class="s2">&quot;url&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">U</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isNew</span><span class="p">())</span><span class="k">return</span> <span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">+</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;/&quot;</span><span class="o">?</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">+</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)},</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">t</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)},</span><span class="nx">isNew</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="kc">null</span><span class="p">},</span><span class="nx">isValid</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_validate</span><span class="p">({},</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">t</span><span class="o">||</span><span class="p">{},{</span><span class="nx">validate</span><span class="o">:</span><span class="kc">true</span><span class="p">}))},</span><span class="nx">_validate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">validate</span><span class="o">||!</span><span class="k">this</span><span class="p">.</span><span class="nx">validate</span><span class="p">)</span><span class="k">return</span> <span class="kc">true</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">validationError</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">validate</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">)</span><span class="k">return</span> <span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;invalid&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">{},{</span><span class="nx">validationError</span><span class="o">:</span><span class="nx">i</span><span class="p">}));</span><span class="k">return</span> <span class="kc">false</span><span class="p">}});</span><span class="kd">var</span> <span class="nx">v</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;keys&quot;</span><span class="p">,</span><span class="s2">&quot;values&quot;</span><span class="p">,</span><span class="s2">&quot;pairs&quot;</span><span class="p">,</span><span class="s2">&quot;invert&quot;</span><span class="p">,</span><span class="s2">&quot;pick&quot;</span><span class="p">,</span><span class="s2">&quot;omit&quot;</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span><span class="k">return</span> <span class="nx">h</span><span class="p">[</span><span class="nx">t</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">)}});</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">Collection</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">{});</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">url</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">url</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">model</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">model</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">comparator</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">comparator</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_reset</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="nx">silent</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span><span class="nx">e</span><span class="p">))};</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="p">{</span><span class="nx">add</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">remove</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">merge</span><span class="o">:</span><span class="kc">true</span><span class="p">};</span><span class="kd">var</span> <span class="nx">y</span><span class="o">=</span><span class="p">{</span><span class="nx">add</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">merge</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">remove</span><span class="o">:</span><span class="kc">false</span><span class="p">};</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">o</span><span class="p">,{</span><span class="nx">model</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">initialize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">toJSON</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">(</span><span class="nx">t</span><span class="p">)})},</span><span class="nx">sync</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">sync</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">defaults</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">{},</span><span class="nx">y</span><span class="p">))},</span><span class="nx">remove</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span><span class="o">:</span><span class="p">[</span><span class="nx">t</span><span class="p">];</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">{});</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">cid</span><span class="p">];</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">--</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">silent</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;remove&quot;</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">_removeReference</span><span class="p">(</span><span class="nx">n</span><span class="p">)}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">defaults</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">{},</span><span class="nx">m</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parse</span><span class="p">)</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">:</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">at</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">==</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">sort</span><span class="o">!==</span><span class="kc">false</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="p">[],</span><span class="nx">v</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_prepareModel</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">e</span><span class="p">)))</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">a</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">remove</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">u</span><span class="p">.</span><span class="nx">cid</span><span class="p">]</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">merge</span><span class="p">){</span><span class="nx">u</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">&amp;&amp;!</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">.</span><span class="nx">hasChanged</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span><span class="nx">l</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">add</span><span class="p">){</span><span class="nx">p</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;all&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_onModelEvent</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">cid</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">remove</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="o">++</span><span class="nx">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="p">[(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">cid</span><span class="p">])</span><span class="nx">v</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">+=</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">!=</span><span class="kc">null</span><span class="p">){</span><span class="nx">n</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">p</span><span class="p">))}</span><span class="k">else</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">,</span><span class="nx">p</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">sort</span><span class="p">({</span><span class="nx">silent</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">silent</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){(</span><span class="nx">a</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;add&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;sort&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">reset</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">{});</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_removeReference</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">[</span><span class="nx">i</span><span class="p">])}</span><span class="nx">e</span><span class="p">.</span><span class="nx">previousModels</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_reset</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="nx">silent</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span><span class="nx">e</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">silent</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;reset&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">push</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_prepareModel</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="nx">at</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">},</span><span class="nx">e</span><span class="p">));</span><span class="k">return</span> <span class="nx">t</span><span class="p">},</span><span class="nx">pop</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">unshift</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_prepareModel</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="nx">at</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">e</span><span class="p">));</span><span class="k">return</span> <span class="nx">t</span><span class="p">},</span><span class="nx">shift</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">slice</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)},</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">==</span><span class="kc">null</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="o">!=</span><span class="kc">null</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">cid</span><span class="o">||</span><span class="nx">t</span><span class="p">]},</span><span class="nx">at</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">[</span><span class="nx">t</span><span class="p">]},</span><span class="nx">where</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span><span class="k">return</span> <span class="nx">e</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="p">[];</span><span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="o">?</span><span class="s2">&quot;find&quot;</span><span class="o">:</span><span class="s2">&quot;filter&quot;</span><span class="p">](</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span><span class="k">return</span> <span class="kc">true</span><span class="p">})},</span><span class="nx">findWhere</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">where</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="kc">true</span><span class="p">)},</span><span class="nx">sort</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Cannot sort a set without a comparator&quot;</span><span class="p">);</span><span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">{});</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sortBy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="p">,</span><span class="k">this</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="p">,</span><span class="k">this</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">silent</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;sort&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">sortedIndex</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="p">);</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">)};</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">sortedIndex</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)},</span><span class="nx">pluck</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">invoke</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">,</span><span class="s2">&quot;get&quot;</span><span class="p">,</span><span class="nx">t</span><span class="p">)},</span><span class="nx">fetch</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parse</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">success</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">success</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">reset</span><span class="o">?</span><span class="s2">&quot;reset&quot;</span><span class="o">:</span><span class="s2">&quot;set&quot;</span><span class="p">;</span><span class="nx">i</span><span class="p">[</span><span class="nx">s</span><span class="p">](</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;sync&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)};</span><span class="nx">R</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sync</span><span class="p">(</span><span class="s2">&quot;read&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">)},</span><span class="nx">create</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_prepareModel</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)))</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">success</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">success</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="nx">r</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">e</span><span class="p">)};</span><span class="nx">t</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">t</span><span class="p">},</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">t</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">)},</span><span class="nx">_reset</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="o">=</span><span class="p">{}},</span><span class="nx">_prepareModel</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">collection</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">collection</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">{});</span><span class="nx">e</span><span class="p">.</span><span class="nx">collection</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">.</span><span class="nx">_validate</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)){</span><span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;invalid&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">},</span><span class="nx">_removeReference</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">collection</span><span class="p">)</span><span class="k">delete</span> <span class="nx">t</span><span class="p">.</span><span class="nx">collection</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s2">&quot;all&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_onModelEvent</span><span class="p">,</span><span class="k">this</span><span class="p">)},</span><span class="nx">_onModelEvent</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">){</span><span class="k">if</span><span class="p">((</span><span class="nx">t</span><span class="o">===</span><span class="s2">&quot;add&quot;</span><span class="o">||</span><span class="nx">t</span><span class="o">===</span><span class="s2">&quot;remove&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">!==</span><span class="k">this</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">===</span><span class="s2">&quot;destroy&quot;</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">===</span><span class="s2">&quot;change:&quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">idAttribute</span><span class="p">){</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">previous</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">idAttribute</span><span class="p">)];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">id</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}});</span><span class="kd">var</span> <span class="nx">_</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;forEach&quot;</span><span class="p">,</span><span class="s2">&quot;each&quot;</span><span class="p">,</span><span class="s2">&quot;map&quot;</span><span class="p">,</span><span class="s2">&quot;collect&quot;</span><span class="p">,</span><span class="s2">&quot;reduce&quot;</span><span class="p">,</span><span class="s2">&quot;foldl&quot;</span><span class="p">,</span><span class="s2">&quot;inject&quot;</span><span class="p">,</span><span class="s2">&quot;reduceRight&quot;</span><span class="p">,</span><span class="s2">&quot;foldr&quot;</span><span class="p">,</span><span class="s2">&quot;find&quot;</span><span class="p">,</span><span class="s2">&quot;detect&quot;</span><span class="p">,</span><span class="s2">&quot;filter&quot;</span><span class="p">,</span><span class="s2">&quot;select&quot;</span><span class="p">,</span><span class="s2">&quot;reject&quot;</span><span class="p">,</span><span class="s2">&quot;every&quot;</span><span class="p">,</span><span class="s2">&quot;all&quot;</span><span class="p">,</span><span class="s2">&quot;some&quot;</span><span class="p">,</span><span class="s2">&quot;any&quot;</span><span class="p">,</span><span class="s2">&quot;include&quot;</span><span class="p">,</span><span class="s2">&quot;contains&quot;</span><span class="p">,</span><span class="s2">&quot;invoke&quot;</span><span class="p">,</span><span class="s2">&quot;max&quot;</span><span class="p">,</span><span class="s2">&quot;min&quot;</span><span class="p">,</span><span class="s2">&quot;toArray&quot;</span><span class="p">,</span><span class="s2">&quot;size&quot;</span><span class="p">,</span><span class="s2">&quot;first&quot;</span><span class="p">,</span><span class="s2">&quot;head&quot;</span><span class="p">,</span><span class="s2">&quot;take&quot;</span><span class="p">,</span><span class="s2">&quot;initial&quot;</span><span class="p">,</span><span class="s2">&quot;rest&quot;</span><span class="p">,</span><span class="s2">&quot;tail&quot;</span><span class="p">,</span><span class="s2">&quot;drop&quot;</span><span class="p">,</span><span class="s2">&quot;last&quot;</span><span class="p">,</span><span class="s2">&quot;without&quot;</span><span class="p">,</span><span class="s2">&quot;indexOf&quot;</span><span class="p">,</span><span class="s2">&quot;shuffle&quot;</span><span class="p">,</span><span class="s2">&quot;lastIndexOf&quot;</span><span class="p">,</span><span class="s2">&quot;isEmpty&quot;</span><span class="p">,</span><span class="s2">&quot;chain&quot;</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">g</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">);</span><span class="k">return</span> <span class="nx">h</span><span class="p">[</span><span class="nx">t</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">)}});</span><span class="kd">var</span> <span class="nx">w</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;groupBy&quot;</span><span class="p">,</span><span class="s2">&quot;countBy&quot;</span><span class="p">,</span><span class="s2">&quot;sortBy&quot;</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">g</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">)};</span><span class="k">return</span> <span class="nx">h</span><span class="p">[</span><span class="nx">t</span><span class="p">](</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)}});</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">View</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">cid</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(</span><span class="s2">&quot;view&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_configure</span><span class="p">(</span><span class="nx">t</span><span class="o">||</span><span class="p">{});</span><span class="k">this</span><span class="p">.</span><span class="nx">_ensureElement</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">delegateEvents</span><span class="p">()};</span><span class="kd">var</span> <span class="nx">x</span><span class="o">=</span><span class="sr">/^(\S+)\s*(.*)$/</span><span class="p">;</span><span class="kd">var</span> <span class="nx">E</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;model&quot;</span><span class="p">,</span><span class="s2">&quot;collection&quot;</span><span class="p">,</span><span class="s2">&quot;el&quot;</span><span class="p">,</span><span class="s2">&quot;id&quot;</span><span class="p">,</span><span class="s2">&quot;attributes&quot;</span><span class="p">,</span><span class="s2">&quot;className&quot;</span><span class="p">,</span><span class="s2">&quot;tagName&quot;</span><span class="p">,</span><span class="s2">&quot;events&quot;</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">o</span><span class="p">,{</span><span class="nx">tagName</span><span class="o">:</span><span class="s2">&quot;div&quot;</span><span class="p">,</span><span class="nx">$</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">t</span><span class="p">)},</span><span class="nx">initialize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">render</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">remove</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">stopListening</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setElement</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">undelegateEvents</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="o">=</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">!==</span><span class="kc">false</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">delegateEvents</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">delegateEvents</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;events&quot;</span><span class="p">))))</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">undelegateEvents</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span> <span class="k">in</span> <span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="nx">s</span><span class="o">+=</span><span class="s2">&quot;.delegateEvents&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">cid</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="s2">&quot;&quot;</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)}}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">undelegateEvents</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s2">&quot;.delegateEvents&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">cid</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">_configure</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">)</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;options&quot;</span><span class="p">),</span><span class="nx">t</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">pick</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">E</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">t</span><span class="p">},</span><span class="nx">_ensureElement</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">){</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;attributes&quot;</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;id&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="s2">&quot;class&quot;</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;className&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;&quot;</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;tagName&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;&gt;&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kc">false</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">setElement</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;el&quot;</span><span class="p">),</span><span class="kc">false</span><span class="p">)}}});</span><span class="nx">a</span><span class="p">.</span><span class="nx">sync</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">t</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">defaults</span><span class="p">(</span><span class="nx">i</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">{}),{</span><span class="nx">emulateHTTP</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">emulateHTTP</span><span class="p">,</span><span class="nx">emulateJSON</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">emulateJSON</span><span class="p">});</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">dataType</span><span class="o">:</span><span class="s2">&quot;json&quot;</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">.</span><span class="nx">url</span><span class="p">){</span><span class="nx">s</span><span class="p">.</span><span class="nx">url</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&quot;url&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">U</span><span class="p">()}</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="o">==</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">===</span><span class="s2">&quot;create&quot;</span><span class="o">||</span><span class="nx">t</span><span class="o">===</span><span class="s2">&quot;update&quot;</span><span class="o">||</span><span class="nx">t</span><span class="o">===</span><span class="s2">&quot;patch&quot;</span><span class="p">)){</span><span class="nx">s</span><span class="p">.</span><span class="nx">contentType</span><span class="o">=</span><span class="s2">&quot;application/json&quot;</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">attrs</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">(</span><span class="nx">i</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">emulateJSON</span><span class="p">){</span><span class="nx">s</span><span class="p">.</span><span class="nx">contentType</span><span class="o">=</span><span class="s2">&quot;application/x-www-form-urlencoded&quot;</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">data</span><span class="o">?</span><span class="p">{</span><span class="nx">model</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">data</span><span class="p">}</span><span class="o">:</span><span class="p">{}}</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">emulateHTTP</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">===</span><span class="s2">&quot;PUT&quot;</span><span class="o">||</span><span class="nx">r</span><span class="o">===</span><span class="s2">&quot;DELETE&quot;</span><span class="o">||</span><span class="nx">r</span><span class="o">===</span><span class="s2">&quot;PATCH&quot;</span><span class="p">)){</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">emulateJSON</span><span class="p">)</span><span class="nx">s</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">_method</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">beforeSend</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">beforeSend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">t</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s2">&quot;X-HTTP-Method-Override&quot;</span><span class="p">,</span><span class="nx">r</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="s2">&quot;GET&quot;</span><span class="o">&amp;&amp;!</span><span class="nx">i</span><span class="p">.</span><span class="nx">emulateJSON</span><span class="p">){</span><span class="nx">s</span><span class="p">.</span><span class="nx">processData</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;PATCH&quot;</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">ActiveXObject</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">external</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">external</span><span class="p">.</span><span class="nx">msActiveXFilteringEnabled</span><span class="p">)){</span><span class="nx">s</span><span class="p">.</span><span class="nx">xhr</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;Microsoft.XMLHTTP&quot;</span><span class="p">)}}</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">xhr</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">));</span><span class="nx">e</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;request&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="k">return</span> <span class="nx">o</span><span class="p">};</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="p">{</span><span class="nx">create</span><span class="o">:</span><span class="s2">&quot;POST&quot;</span><span class="p">,</span><span class="nx">update</span><span class="o">:</span><span class="s2">&quot;PUT&quot;</span><span class="p">,</span><span class="nx">patch</span><span class="o">:</span><span class="s2">&quot;PATCH&quot;</span><span class="p">,</span><span class="s2">&quot;delete&quot;</span><span class="o">:</span><span class="s2">&quot;DELETE&quot;</span><span class="p">,</span><span class="nx">read</span><span class="o">:</span><span class="s2">&quot;GET&quot;</span><span class="p">};</span><span class="nx">a</span><span class="p">.</span><span class="nx">ajax</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">S</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">Router</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">{});</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">routes</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">routes</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_bindRoutes</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">$</span><span class="o">=</span><span class="sr">/\((.*?)\)/g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">T</span><span class="o">=</span><span class="sr">/(\(\?)?:\w+/g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">H</span><span class="o">=</span><span class="sr">/\*\w+/g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">A</span><span class="o">=</span><span class="sr">/[\-{}\[\]+?.,\\\^$|#\s]/g</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">S</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">o</span><span class="p">,{</span><span class="nx">initialize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">route</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">isRegExp</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_routeToRegExp</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">e</span><span class="p">)){</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">_extractParameters</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">trigger</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">r</span><span class="p">,[</span><span class="s2">&quot;route:&quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">n</span><span class="p">));</span><span class="nx">r</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;route&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;route&quot;</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)});</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">navigate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">_bindRoutes</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;routes&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">);</span><span class="k">while</span><span class="p">((</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">pop</span><span class="p">())</span><span class="o">!=</span><span class="kc">null</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">t</span><span class="p">])}},</span><span class="nx">_routeToRegExp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="s2">&quot;\\$&amp;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span><span class="s2">&quot;(?:$1)?&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">T</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="s2">&quot;([^/]+)&quot;</span><span class="p">}).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">H</span><span class="p">,</span><span class="s2">&quot;(.*?)&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;^&quot;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&quot;$&quot;</span><span class="p">)},</span><span class="nx">_extractParameters</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="nx">t</span><span class="o">?</span><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">})}});</span><span class="kd">var</span> <span class="nx">I</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">History</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">handlers</span><span class="o">=</span><span class="p">[];</span><span class="nx">h</span><span class="p">.</span><span class="nx">bindAll</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&quot;checkUrl&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="o">!==</span><span class="s2">&quot;undefined&quot;</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">history</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">history</span><span class="p">}};</span><span class="kd">var</span> <span class="nx">N</span><span class="o">=</span><span class="sr">/^[#\/]|\s+$/g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">P</span><span class="o">=</span><span class="sr">/^\/+|\/+$/g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">O</span><span class="o">=</span><span class="sr">/msie [\w.]+/</span><span class="p">;</span><span class="kd">var</span> <span class="nx">C</span><span class="o">=</span><span class="sr">/\/$/</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">started</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">o</span><span class="p">,{</span><span class="nx">interval</span><span class="o">:</span><span class="mi">50</span><span class="p">,</span><span class="nx">getHash</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">||</span><span class="k">this</span><span class="p">).</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/#(.*)$/</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">},</span><span class="nx">getFragment</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_hasPushState</span><span class="o">||!</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsHashChange</span><span class="o">||</span><span class="nx">e</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">C</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getHash</span><span class="p">()}}</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">N</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)},</span><span class="nx">start</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">started</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Backbone.history has already been started&quot;</span><span class="p">);</span><span class="nx">I</span><span class="p">.</span><span class="nx">started</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},{</span><span class="nx">root</span><span class="o">:</span><span class="s2">&quot;/&quot;</span><span class="p">},</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsHashChange</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">hashChange</span><span class="o">!==</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsPushState</span><span class="o">=!!</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">pushState</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_hasPushState</span><span class="o">=!!</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">pushState</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">history</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">pushState</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">();</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentMode</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">())</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="o">||</span><span class="nx">i</span><span class="o">&lt;=</span><span class="mi">7</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">P</span><span class="p">,</span><span class="s2">&quot;/&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsHashChange</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">iframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;iframe src=&quot;javascript:0&quot; tabindex=&quot;-1&quot; /&gt;&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">().</span><span class="nx">appendTo</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">contentWindow</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_hasPushState</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;popstate&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">checkUrl</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsHashChange</span><span class="o">&amp;&amp;</span><span class="s2">&quot;onhashchange&quot;</span><span class="k">in</span> <span class="nb">window</span><span class="o">&amp;&amp;!</span><span class="nx">r</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;hashchange&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">checkUrl</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsHashChange</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_checkUrlInterval</span><span class="o">=</span><span class="nx">setInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">checkUrl</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">interval</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^\/]$/</span><span class="p">,</span><span class="s2">&quot;$&amp;/&quot;</span><span class="p">)</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsHashChange</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsPushState</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">_hasPushState</span><span class="o">&amp;&amp;!</span><span class="nx">n</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="p">);</span><span class="k">return</span> <span class="kc">true</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsPushState</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_hasPushState</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">hash</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getHash</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="nx">N</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">replaceState</span><span class="p">({},</span><span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="o">+</span><span class="nx">s</span><span class="p">.</span><span class="nx">search</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">silent</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadUrl</span><span class="p">()},</span><span class="nx">stop</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s2">&quot;popstate&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">checkUrl</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s2">&quot;hashchange&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">checkUrl</span><span class="p">);</span><span class="nx">clearInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_checkUrlInterval</span><span class="p">);</span><span class="nx">I</span><span class="p">.</span><span class="nx">started</span><span class="o">=</span><span class="kc">false</span><span class="p">},</span><span class="nx">route</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">handlers</span><span class="p">.</span><span class="nx">unshift</span><span class="p">({</span><span class="nx">route</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">callback</span><span class="o">:</span><span class="nx">e</span><span class="p">})},</span><span class="nx">checkUrl</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">iframe</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getHash</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">iframe</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="p">)</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">iframe</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">loadUrl</span><span class="p">()</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">loadUrl</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getHash</span><span class="p">())},</span><span class="nx">loadUrl</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">any</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handlers</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">route</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">e</span><span class="p">)){</span><span class="nx">t</span><span class="p">.</span><span class="nx">callback</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="kc">true</span><span class="p">}});</span><span class="k">return</span> <span class="nx">i</span><span class="p">},</span><span class="nx">navigate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">I</span><span class="p">.</span><span class="nx">started</span><span class="p">)</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="kc">true</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="p">{</span><span class="nx">trigger</span><span class="o">:</span><span class="nx">e</span><span class="p">};</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">(</span><span class="nx">t</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fragment</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">+</span><span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_hasPushState</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">history</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="o">?</span><span class="s2">&quot;replaceState&quot;</span><span class="o">:</span><span class="s2">&quot;pushState&quot;</span><span class="p">]({},</span><span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span><span class="nx">i</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_wantsHashChange</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateHash</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">iframe</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getHash</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">iframe</span><span class="p">))){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">iframe</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">open</span><span class="p">().</span><span class="nx">close</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateHash</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">iframe</span><span class="p">.</span><span class="nx">location</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">i</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">trigger</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">loadUrl</span><span class="p">(</span><span class="nx">t</span><span class="p">)},</span><span class="nx">_updateHash</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(javascript:|#).*$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">hash</span><span class="o">=</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">}}});</span><span class="nx">a</span><span class="p">.</span><span class="nx">history</span><span class="o">=</span><span class="k">new</span> <span class="nx">I</span><span class="p">;</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&quot;constructor&quot;</span><span class="p">)){</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">constructor</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">r</span><span class="p">};</span><span class="nx">s</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">__super__</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="nx">I</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="kd">var</span> <span class="nx">U</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;A &quot;url&quot; property or function must be specified&#39;</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">R</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="nx">i</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">)}}}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span></div><div class='line' id='LC2'><span class="cm">/*</span></div><div class='line' id='LC3'><span class="cm">//@ sourceMappingURL=backbone-min.map</span></div><div class='line' id='LC4'><span class="cm">*/</span></div></pre></div>
          </td>
        </tr>
      </table>
  </div>

          </div>
        </div>

        <a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" class="js-jump-to-line" style="display:none">Jump to Line</a>
        <div id="jump-to-line" style="display:none">
          <form accept-charset="UTF-8" class="js-jump-to-line-form">
            <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;">
            <button type="submit" class="button">Go</button>
          </form>
        </div>

</div>

<div id="js-frame-loading-template" class="frame frame-loading large-loading-area" style="display:none;">
  <img class="js-frame-loading-spinner" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-128.gif" height="64" width="64">
</div>


          </div>
        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div>
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">Developer</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>
    </ul>

    <a href="/">
      <span class="mega-octicon octicon-mark-github"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2013 <span title="0.04970s from fe4.rs.github.com">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-fullscreen-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="js-fullscreen-contents" placeholder="" data-suggester="fullscreen_suggester"></textarea>
          <div class="suggester-container">
              <div class="suggester fullscreen-suggester js-navigation-container" id="fullscreen_suggester"
                 data-url="/documentcloud/backbone/suggestions/commit">
              </div>
          </div>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped leftwards" title="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped leftwards"
      title="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-remove-close close ajax-error-dismiss"></a>
      Something went wrong with that request. Please try again.
    </div>

    
    <span id='server_response_time' data-time='0.05000' data-host='fe4'></span>
    
  </body>
</html>

